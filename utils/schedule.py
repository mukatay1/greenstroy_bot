import schedule
import asyncio
from aiogram import Bot

from database.main import SessionLocal
from database.models.models import Employee


async def send_morning_message(bot: Bot) -> None:
    db = SessionLocal()
    employees = db.query(Employee).all()
    for employee in employees:
        try:
            message_text = (
                f"<b>üï∞Ô∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {employee.fio}!</b>\n\n"
                f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤–∞—à–µ –ø—Ä–∏–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è.</i>"
            )
            await bot.send_message(employee.telegram_id, message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.telegram_id}: {e}")
    db.close()


async def send_evening_message(bot: Bot) -> None:

    db = SessionLocal()
    employees = db.query(Employee).all()
    for employee in employees:
        try:
            message_text = (
                f"<b>üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {employee.fio}!</b>\n\n"
                f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤–∞—à–µ –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è.</i>"
            )
            await bot.send_message(employee.telegram_id, message_text)
            print(message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.telegram_id}: {e}")
    db.close()

async def send_evening_message_again(bot: Bot) -> None:

    db = SessionLocal()
    employees = db.query(Employee).all()
    for employee in employees:
        try:
            message_text = (
                f"<b>üåÜ –î–æ–±—Ä–æ–π –Ω–æ—á–∏, {employee.fio}!</b>\n\n"
                f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> <i>–í—ã –º–æ–ª–æ–¥–µ—Ü! –ö–∞–∫ –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ! –ò –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–±—ã–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é)</i>"
            )
            await bot.send_message(employee.telegram_id, message_text)
            print(message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.telegram_id}: {e}")
    db.close()

async def run_schedule(bot: Bot) -> None:
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

def schedule_jobs(bot: Bot) -> None:
    schedule.every().monday.at("08:50").do(lambda: asyncio.create_task(send_morning_message(bot)))
    schedule.every().tuesday.at("08:50").do(lambda: asyncio.create_task(send_morning_message(bot)))
    schedule.every().wednesday.at("08:50").do(lambda: asyncio.create_task(send_morning_message(bot)))
    schedule.every().thursday.at("08:50").do(lambda: asyncio.create_task(send_morning_message(bot)))
    schedule.every().friday.at("08:50").do(lambda: asyncio.create_task(send_morning_message(bot)))

    schedule.every().monday.at("19:00").do(lambda: asyncio.create_task(send_evening_message(bot)))
    schedule.every().tuesday.at("19:00").do(lambda: asyncio.create_task(send_evening_message(bot)))
    schedule.every().wednesday.at("19:00").do(lambda: asyncio.create_task(send_evening_message(bot)))
    schedule.every().thursday.at("19:00").do(lambda: asyncio.create_task(send_evening_message(bot)))
    schedule.every().friday.at("19:00").do(lambda: asyncio.create_task(send_evening_message(bot)))

    schedule.every().monday.at("21:00").do(lambda: asyncio.create_task(send_evening_message_again(bot)))
    schedule.every().tuesday.at("21:00").do(lambda: asyncio.create_task(send_evening_message_again(bot)))
    schedule.every().wednesday.at("21:00").do(lambda: asyncio.create_task(send_evening_message_again(bot)))
    schedule.every().thursday.at("21:00").do(lambda: asyncio.create_task(send_evening_message_again(bot)))
    schedule.every().friday.at("21:00").do(lambda: asyncio.create_task(send_evening_message_again(bot)))

    loop = asyncio.get_event_loop()
    loop.create_task(run_schedule(bot))
